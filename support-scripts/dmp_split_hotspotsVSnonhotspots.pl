#!/usr/bin/perl -w
# dmp_split_hotspotsVSnonhotspots.pl --- Input is the combined list of variants generated by IMPACT which are also genotyped. This script will split the variants based on hotspot list
# Author: Ronak Shah <shahr2@mskcc.org>
# Created: 24 OCT 2014
# Version: v0.01
use warnings;
use strict;
use Getopt::Long;
use Cwd;
use MSKCC_DMP_Logger;
use Tie::IxHash;
my ( $input, $hotspots, $titleFile, $clinicalExons, $MAFthreshold );
my $logger =
  MSKCC_DMP_Logger->get_logger('SPLIT VARIANTS BASED ON HOTSPOT LIST');
$logger->start_local();

if (
	 @ARGV < 1
	 or !GetOptions(
					 'input|i:s'          => \$input,
					 'hotspots|h:s'       => \$hotspots,
					 'clinicalExons|ce:s' => \$clinicalExons,
					 'titleFile|t:s'      => \$titleFile,
	 )
  )
{
	Usage();
}
if ( !$input )
{
	$logger->fatal("Input file is missing");
	Usage();
}
if ( !$hotspots )
{
	$logger->fatal("Hotspot file is missing");
	Usage();
}
if ( !$clinicalExons )
{
	$logger->fatal("Clinical exon file is missing");
	Usage();
}
if ( !$titleFile )
{
	$logger->fatal("Title file is missing");
	Usage();
}
my $outdir = getcwd;

#Get Title file information
my ( $patientIDPerSampleId, $classPerPatientIdSampleId ) =
  &ReadTitleFile( $titleFile, $outdir );
my %patientIDPerSampleId      = %$patientIDPerSampleId;
my %classPerPatientIdSampleId = %$classPerPatientIdSampleId;
my ( %hotspotExonHash, %hotspotIndelHash, %hotspotHash );
$logger->info("Reading in the hotspots file: $hotspots.");
open HOTSPOT, "<",
  $hotspots || die $logger->fatal("Can not open $hotspots: $!");
while (<HOTSPOT>)
{
	chomp;
	my @line = split("\t");
	next if ( $line[0] eq 'Index' );
	my ( $mut, undef ) = split( " ", $line[2] );
	my $gene = $line[1];
	if ( $mut =~ /fs/ )
	{
		my ($mut2) = $mut =~ /([A-Z]\d+fs).*/;
		$hotspotIndelHash{ $gene . ":" . $mut2 } = $mut2;
		print "$gene\t$mut\n" if ( !$mut2 );
	} elsif ( $mut =~ />/ )
	{
		my ($mut2) = $mut =~ /(.*)\>.*/;
		$hotspotIndelHash{ $gene . ":" . $mut2 } = $mut2;
		print "$gene\t$mut\n" if ( !$mut2 );
	} elsif ( $mut =~ /del/ )
	{
		my ($mut2) = $mut =~ /(.*)del/;
		$hotspotIndelHash{ $gene . ":" . $mut2 } = $mut2;
		print "$gene\t$mut\n" if ( !$mut2 );
	} elsif ( $mut =~ /validation/ )
	{
		$mut =~ s/_indel//;

		#$hotspotExonHash{$gene.":".$mut} = $mut;
	} elsif ( $mut =~ /ins/ )
	{
		$hotspotIndelHash{ $gene . ":" . $mut } = $mut;
	} else
	{
		my ($mut2) = $mut =~ /([A-Z]\d+)\>*[A-Za-z]*.*/;
		if ($mut2)
		{
			$hotspotHash{ $gene . ":" . $mut2 } = $mut2;
		}
	}
}
close HOTSPOT;
$logger->info("Reading in the clinical exons file: $clinicalExons");
open IN, "<", $clinicalExons || die $!;
while (<IN>)
{
	chomp;
	my ( $gene, $exon, $type ) = split("\t");
	$hotspotExonHash{ $gene . ":" . $exon } = $type;
}
close IN;
$logger->info("Starting the Spliting of variants.");
my $outputHotspots    = $input;
my $outputNonHotspots = $input;
$outputHotspots    =~ s/txt/Hotspots.txt/;
$outputNonHotspots =~ s/txt/NonoHotspots.txt/;
open HOTSPOT, ">",
  $outputHotspots || die $logger->fatal("Can not create $outputHotspots: $!");
open NONHOTSPOT, ">", $outputNonHotspots
  || die $logger->fatal("Can not create $outputNonHotspots: $!");
open INPUT, "<", $input || die $logger->fatal("Can not open $input :$!");

while (<INPUT>)
{
	our @header;

#our ( $DPindex, $ADindex, $VFindex, $occurrenceIndex, $TNfreqRatioIndex, $AAchangeIndex, $exonIndex, $varTypeIndex );
	our (
		  $DPindex,          $ADindex,         $VFindex,
		  $commentsIndex,    $occurrenceIndex, $allNormalMedianVFIndex,
		  $TNfreqRatioIndex, $AAchangeIndex,   $exonIndex,
		  $varTypeIndex,     $MAFindex,        $sampleIDindex,
		  $normalIDindex
	);    #DC
	if (/^Sample/)
	{
		@header = split( "\t", $_ );
		print HOTSPOT "$_";
		print NONHOTSPOT "$_";
		foreach my $i ( 0 .. scalar(@header) - 1 )
		{
			if ( $header[$i] eq "AAchange" )
			{
				$AAchangeIndex = $i;
			} elsif ( $header[$i] eq "Exon" )
			{
				$exonIndex = $i;
			} elsif ( $header[$i] eq "VariantClass" )
			{
				$varTypeIndex = $i;
			} elsif ( $header[$i] eq "1000G_MAF" )
			{
				$MAFindex = $i;
			} elsif ( $header[$i] eq "Sample" )
			{
				$sampleIDindex = $i;
			} elsif ( $header[$i] eq "NormalUsed" )
			{
				$normalIDindex = $i;
			} elsif ( $header[$i] eq "Comments" )
			{
				$commentsIndex = $i;
			}
		}
		next;
	}

	#print "$AAchangeIndex\n";
	my @line       = split("\t");
	my $sampleID   = $line[$sampleIDindex];
	my $normalUsed = $line[$normalIDindex];
	my $ref        = $line[4];
	my $alt        = $line[5];
	my $gene       = $line[7];
	my $varType    = $line[$varTypeIndex];
	my $matched;
	my $patientID = $patientIDPerSampleId{$sampleID};
	my $key       = "$normalUsed" . ":" . "$patientID";
	my $tag;

	if (     ( exists $classPerPatientIdSampleId{$key} )
		 and ( $classPerPatientIdSampleId{$key} =~ /Normal/ ) )
	{
		$matched = "Matched";
	} else
	{
		$matched = "Unmatched";
	}
	print "$sampleID\t$normalUsed\t$matched\n";
	my $exon = $line[$exonIndex];

	# Filter Indels
	if ( length($ref) > length($alt) || length($ref) < length($alt) )
	{

		#if ( exists( $hotspotExonHash{$exon} ) ) { #hotspot exons
		if ( exists( $hotspotExonHash{ $gene . ":" . $exon } ) )
		{    #DC: hotspot exons bug
			print HOTSPOT "$_";
		} else
		{
			print NONHOTSPOT "$_";
		}
	}

	# Filter SNVs
	if ( length($ref) == length($alt) && length($ref) == 1 )
	{
		my ($aaChange) = $line[$AAchangeIndex] =~ /p\.([A-Z]\d+).*/;
		if ( $varType eq "splicing" || $varType eq "upstream" )
		{
			$aaChange = "NA";
		}

		#if ( exists( $hotspotHash{$aaChange} ) ) {    # hotspot mutation
		if ( exists( $hotspotHash{ $gene . ":" . $aaChange } ) )
		{    # DC: hotspot mutation bug
			print HOTSPOT "$_";
		} else
		{
			print NONHOTSPOT "$_";
		}
	}
}
#####################################
#####################################
#Read data related to samples as well as barcodes from title file.
sub ReadTitleFile
{
	my ( $titleFile, $outdir ) = @_;
	my @barcode      = ();
	my @pool         = ();
	my @sampleId     = ();
	my @collabId     = ();
	my @patientId    = ();
	my @class        = ();
	my @sampleType   = ();
	my @inputNg      = ();
	my @libraryYeild = ();
	my @poolInput    = ();
	my @baitVersion  = ();
	my @fof          = ();
	my @newfof       = ();
	tie( my %patientIDPerSampleID,      'Tie::IxHash' );
	tie( my %classPerPatientIDSampleID, 'Tie::IxHash' );
	open( TFH, $titleFile )
	  || die $logger->fatal("Can not open $titleFile, $!");

	while (<TFH>)
	{
		next if ( $. == 1 );
		my @dataCols = split( "\t", $_ );
		my @newDatacols =
		  grep( s/\s*$//g, @dataCols );    #remove whitespace if any
		push( @barcode,      $newDatacols[0] );
		push( @pool,         $newDatacols[1] );
		push( @sampleId,     $newDatacols[2] );
		push( @collabId,     $newDatacols[3] );
		push( @patientId,    $newDatacols[4] );
		push( @class,        $newDatacols[5] );
		push( @sampleType,   $newDatacols[6] );
		push( @inputNg,      $newDatacols[7] );
		push( @libraryYeild, $newDatacols[8] );
		push( @poolInput,    $newDatacols[9] );
		push( @baitVersion,  $newDatacols[10] );
	}
	close(TFH);
	for ( my $i = 0 ; $i < scalar(@barcode) ; $i++ )
	{

		#print "$[$i] => $class[$i]\n";
		$classPerPatientIDSampleID{ $sampleId[$i] . ":" . $patientId[$i] } =
		  $class[$i];
		$patientIDPerSampleID{ $sampleId[$i] } = $patientId[$i];
	}
	return ( \%patientIDPerSampleID, \%classPerPatientIDSampleID );
}
##############################################
##############################################
sub Usage
{
	print "Unknown option: @_\n" if (@_);
	print "\nUsage: perl dmp_filter_genotyped_variants.pl [options]
    [--input|i                                            S  File containing mutations with genotype information (required)]
    [--hotspots|h										  S  File containing the list of hotspots (required)]
    [--clinicalExons|ce									  S  File containing the list of clinical exons (required)]
    [--titleFile|t										  S  Title file (required)]
 	  \n";
	exit;
}
__END__

=head1 NAME

dmp_split_hotspotsVSnonhotspots.pl - Describe the usage of script briefly

=head1 SYNOPSIS

dmp_split_hotspotsVSnonhotspots.pl [options] args

      -opt --long      Option description

=head1 DESCRIPTION

Stub documentation for dmp_filter_genotyped_variants.pl, 

=head1 AUTHOR

Shah, E<lt>shahr2@phoenix-h1E<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2013 by Shah

This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.2 or,
at your option, any later version of Perl 5 you may have available.

=head1 BUGS

None reported... yet.

=cut
